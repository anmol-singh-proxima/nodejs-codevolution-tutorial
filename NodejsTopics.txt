=======================================
======== Javascript and NodeJS ========
=======================================

1. ECMAScript
- ECMAScript is the Core of Javascript
- Javascript = ECMAScript + APIs + other features
- It started in 1996 as a ECMAScript Standard
- There are 6 versions of ECMAScript
    - ECMAScript 1 - 1997
    - ECMAScript 2 - 1998
    - ECMAScript 3 - 1999
    - ECMAScript 4 - Never Released
    - ECMAScript 5 - 2009
    - ECMAScript 6 - 2015 (ES6)


2. V8 Javascript Engine
- A Javascript engine helps in compiling and executing of a Javascript program
- One such engine is V8 Engine which is written in C++, and it is developed by Google and used in Google Chrome


3. Javascript Runtime
- A Javascript Runtime is an environment which provides all the neccessary components in order to use and run a Javascript program
- Chrome contains one such Javascript Runtime
- Chrome Javascript Runtime contains
    - V8 Javascript Engine
        - Memory - Heap Memory to store the variables in a Javascript program
        - Call Stack - To run Javascript program
    - Web Browser APIs
        - DOM
        - Storage
        - Promises
        - Timers
    - Queue
        - Before any async task gets executed in JS, it waits in the Queue
        - 2 kinds of Queue:
            - Microstack Queue
            - Callback/Task Queue
    - Event Loop
        - It makes sure the async task gets executed in the right order
 

4. Nodejs
- Nodejs is an open-source, cross-platform Javascript Runtime environment
- It is not a language and not even a framework
- It is capable of executing Javascript code outside the Browser
- It can execute not only the Standard ECMAScript languagebut also new features that are available through C++ bindings using the V8 Engine
- It consists of C++ files which form the core features and Javascript files which expose common utilities and some of the C++ features for easier consumption
- It is used to build complex and powerful applications
- Nodejs Runtime contains:
    - Dependencies - V8, libuc, zlib, etc
    - C/C++ Features - File-system access, Networking, etc
    - JS Libraries - Functions and Utilities to tap into C/C++ features
- There are 2 ways to execute Javascript in Nodejs:
    - REPL (Read Evaluate Print Loop)
    - Put the code in a Javascript file and run it in terminal


5. Browser Vs Nodejs
- Browser contains DOM, Web Platform APIs like cookies, and objects like document and window whereas Nodejs contains APIs like filesystem access functionality
- With Nodejs, you control the environment, whereas with a Browser, users have the control



==============================================
======== NodeJS Topics Before Modules ========
==============================================

1. Callbacks
- In Javascript, functions are first class objects
- A function can be passed as an argument to a function
- A function can also be returned as values from other function
- Callback Function - A function which is passed as argument or returned as values from other function is called a callBack function
- Higher Order Function - A function to which a callBack is passed as an argument is called a Higher Order Function
    function callBack () {}
    higherOrderFunction(callBack) {
        ...
        callBack()
    }
- 2 Types of Callbacks:
    - Synchronous Callback
    - Asynchronous Callback
- Synchronous Callback
    - A callBack which is executed immediately is called a Synchronous Callback
- Asynchronous Callback
    - A callBack that is often used to continue or resume code execution after an asynchronous operation has completed
    - Callbacks are used to delay the execution of a function until a particular time or event has occurred
    - Nodejs has an asynchronous behaviour to prevent blocking of execution, ex- reading data from a file, fetching data from a database or handling a network request.


2. Character Sets and Encoding
- Formats of Data
    - Binary Data
        - Collection of 0s and 1s
        - Each of this 0 or 1 is called as a Binary digit or a Bit
    - Decimal Numbers
        - Collection of numbers from 0 to 9
    - Characters
        - Collection of alphabetic characters i.e. a-z and A-Z
        - Collection of special characters on keyboard
- Storage of data in Computers
    - Computers store and represent the data in Binary format
    - First, the Characters are converted into Decimal Numbers
    - Then the Decimal Numbers are converted into Binary data
- Character Sets
    - Computers assign a number to every single character on keyboard which is called Character code
    - We can get the character code by using charCodeAt() function
        - for e.g. 'a'.charCodeAt() will give 97
    - This assignment is done by using Character Sets
    - Character Sets are the predefined list of characters represented by Numbers
    - Popular Character Sets - UNICODE and ASCII
- Character Encoding
    - Character encoding dictates how to represent a number in the character set as binary data before it can store it in a computer
    - It dictates how many bits to be used to represent a number
    - Popular Character encoding system is UTF-8


3. Streams and Buffers
- A stream is a sequence of data that is being moved from one point to another over time
- In nodejs, the idea is to process streams of data in chunks as they arrive instead of waiting for the entire data to be available before processing
- It prevents unneccessary data downloads and memory usage
- Buffer is a storage area in Nodejs Runtime to store the stream of data before sending it for processing
- Nodejs cannot control the pace at which data arrives in the stream
- It can only decide when is the right time to send the data for processing


4. Asynchronous Javascript
- Javascript is Synchronous, Blocking and Single-threaded in nature
- This nature of Javascript is not beneficial for applications
- The non-blocking and asynchronous behaviour is made possible by Web Browsers in front-end and Nodejs in backend by using:
    - setTimeout(), setInterval()
    - addEventListeners()
    - callBacks, Promises, async-await
- This style of programming where we don't block the main Javascript thread is fundamental to nodejs


 
===================================
======== Modules in NodeJS ========
===================================

1. What is a Module?
- A module is an encapsulated and reusable chunk of code that has its own context
- In Nodejs, each file is a module that is isolated by default
- To load a module into another file, we use require() function
- When the main file is executed, the code in the module is also executed
- If a file we are requiring is a Javascript file, then we can skip specifying the .js extension and nodejs will infer it on our behalf


2. Types of Modules
- Local Modules - Modules that we create as a developer in our application
- Built-in Modules - Modules that Nodejs ships with out of the box
- Third party Modules - Modules created by other developers that we can use in out application


3. CommonJS
- It is a standard that states how a module should be structured and shared
- This is the first (or default) Module System included in Nodejs
- Each file is treated as a module
- Variables, functions, objects are not accessible to other files by default
- Explicitly tell the module system which parts of the code to be exported by using module.exports or exports
- To import code into a file, use the require() function
- File extension for this module system is '.js'


4. Module Scope
- Each module has its own private scope so 2 modules containing same variable-name or function-name imported in one Javascript file does not create conflict
- It is done by using IIFE(Immediately Invoked Function Expression)


5. Module Wrapper
- Nodejs wraps each module with an IIFE which receives 5 parameters:
    - exports
    - require
    - module
    - __dirname
    - __filename


6. Module Caching
- Suppose a module contains a class and its exporting object (or instance) of the class
- Then whenever the module is imported (or called) into a file for the first time, the instance of the class will get cached or saved
- Then if we call the same module again in the file, nodejs will return the same reference to the instance of the class in the module which has been cached
- It creates a problem when we want a new instance of the same class from the imported module in the file
- To solve this, we can export the class itself in the file and then create different instances based on our requirements


7. Module Import and Export Patterns in CommonJS
- There are 5 types of Patterns for importing and exporting modules:
    1.  Export: const funcName = () => {};
                module.exports = funcName;
        Import: const funcName = require('./moduleName);
    2.  Export: module.exports = () => {};
        Import: const funcName = require('./moduleName);
    3.  Export: const funcName1 = () => {};
                const funcName2 = () => {};
                module.exports = { funcName1, funcName2 };
        Import: const moduleName = require('./moduleName);
                const { funcName1, funcName2 } = moduleName;
    4.  Export: module.exports.funcName1 = () => {};
                module.exports.funcName2 = () => {};
        Import: const moduleName = require('./moduleName);
                const { funcName1, funcName2 } = moduleName;
    5.  Export: exports.funcName = () => {};
        Import: const funcName = require('./moduleName);
- Always use module.exports instead of only exports because it creates a barrier in these two objects leading to errors in importing the functions from the module


8. ES Modules
- ES Modules is the ECMAScript standard for Modules
- It is also known as ECMAScript Modules, short for ES Modules or ESM
- It was introduced with ES6 and got included in Nodejs 14 and above
- Instead of module.exports, we use the 'export' keyword
- An export can be default or named
- We import the exported variables and functions using 'import' keyword
- If it is a default export, we can assign any name while exporting
- If it is a names export, the import name must be the same
- The extension for the module is '.mjs' and this module can be imported only in a file with '.mjs' extension
- The import and export formats in ESM are:
    1.  Export: const funcName = () => {};
                export default funcName;
        Import: import funcName from 'moduleName';
    2.  Export: export default () => {};
        Import: import funcName from 'moduleName';
    3.  Export: const funcName1 = () => {};
                const funcName2 = () => {};
                export default { funcName1, funcName2 }
        Import: import moduleName from 'moduleName'
                const { funcName1, funcName2 } = moduleName;
    4.  Export: export const funcName1 () => {};
                export const funcName2 () => {};
        Import: import * as moduleName from 'moduleName';
                const { funcName1, funcName2 } = moduleName;
                OR
                import { funcName1, funcName2 } from 'moduleName'


9. Importing JSON
- Importing Json file similar to importing a module
    - const data = require('[json_file]')
- Then this data can be used as either an object or an array based on the data stored in json_file.


10. Built-in Modules
- Modules that are shipped with Nodejs
- These are also referred as Core modules
- Need to import the modules before using them in our files
- The 5 common Built-in modules are:
    - path
    - events
    - fs
    - stream
    - http
- To import Built-in modules, we need to prefix the name of module with 'node:' in require(), but 'node:' prefix is optional
    - const module = require('node:[module_name]')
- node: Protocol
    - Makes it perfectly clear that import is a Nodejs built-in module
    - Makes the import identifier a valid absolute URL
    - Avoids conflicts for future Nodejs biult-in modules


11. Built-in Module: path
- It is a module which provides utilities to work with files, directories and paths
- There are a few methods in it:
    - path.basename("[path]")
    - path.extname("[file/dir/path]")
    - path.parse("[file/dir/path]")
    - path.format(path.parse("[file/dir/path]"))
    - path.isAbsolute("[path]")
    - path.join("[file/dir/path]", "[file/dir/path]", ...)
    - path.resolve("[file/dir/path]", "[file/dir/path]", ...)


12. Built-in Module: events
- The events module allow us to work with events in nodejs
- An event is an action or an occurrence that has happened in our application that we can respond to
- Using the events module, we can dispatch our own custom events and respond to those custom events in a non-blocking manner
- The events module export an 'EventEmitter' class, and we can create an object of this class and use it in out file
- The object has 2 functions:
    - emitter.on() - to register an event
    - emitter.emit() - to make that event occur
- The on() function has an event-name as the first argument and the callBack as the second argument
- The emit() function has the event-name as the first argument and it can pass other arguments to further pass them to the callbacks in on() function
- Whenever the emit() function executes, the event described as first argument is occurred and the on() function which has the same event-name will execute the callback within it. 
- This EventEmitter class can be extended to another class and can be made use of the extended events functionality along with the functionality of the Child class


13. Built-in Module: fs
- 'fs' module is responsible for file operations in nodejs i.e. reading and writing of the files
- The file operations are done both Synchronously and Asynchronously
- The functions are:
    - fs.readFileSync(filename, encoding) - reading the file Synchronously
    - fs.readFile(filename, encoding, callBack(error, data) {}) - reading the file Asynchronously and exceute the callBack after the operation
    - fs.writeFileSync(filename, file-content) - writing the file with file-content Synchronously
    - fs.writeFile(filename, file-content, { flag: 'a' }, callBack(error) {}) - writing the file Asynchronously with the file-content and a flag is provided for mentioning the write or append mode and a callBack to execute after the operation is completed
- 'node:fs/promises'
    - This is another module for doing Asynchronous file operations
    - This module performs the file operations with Promises and async-await instead of callBacks


14. Built-in Module: streams
- This module is not used explicity by the developers
- This module is used by other node-modules such as node:fs
- This module internally extends EventEmitter class of the node:events module
- Process of using Streams
    - We need to create a stream called readableStream for reading the data from one file
    - Then we need to create a stream called writeableStream for writing the data to another file
    - Then we need to create an event-listener on the readableStream to get the chunk from the stream
    - Then we can write the chunk using writeableStream into the file
- We can define the number of bytes in a chunk of the stream with the property 'highWaterMark'
- Types of streams:
    - Readable stream from which data can be read
    - Writeable stream to which we can write the data
    - Duplex streams that are both Readable and Writeable
    - Transform streams that can modify or transform the data as it is written and read
- Pipes:
    - Pipes are a way of connecting readableStream to writeableStream
    - It omits the use of event-listeners on the readableStream (as mentioned above)
    - We can chain the pipe() where the destination stream must be either Readable, Duplex or Transform


15. Built-in Module: http
- 'node:http' module helps the nodejs to receive and send requests and responses respectively via HTTP (Hyper Text Transfer Protocol) Protocol which is one of the protocol to send the data over the network
- 'node:http' module is used to create a server on nodejs
- The server is created using http.createServer() method
- http.createServer() method internally uses EventEmitter so a callBack is passed to this function
- This callBack executes whenever an http request has been made to the server only after the server has started listening to the requests
- This callBack contains two arguments: a request object and a response object
- These arguments are passed automatically to the function whenever a request is listened on the server

- http Responses
    - Plain Text Response
        - "Content-Type": "text/plain"
        - res.end([some-content])
    - JSON Response
        - "Content-Type": "application/json"
        - res.end(JSON.stringify([json-abject]))
    - HTML Response
        - "Content-Type": "text/html"
        - Read the html file and pass it to response object
    - HTML Template
        - This is nothing but the HTML response with String replacement using html.replace() method


- http routing
    - We can get the url from the request object and based on that we can send the response via response object
    - http routing is nothing but sending the responses based on the routes sent as requests from the client



==========================================
======== libuv: Nodejs Dependency ========
==========================================


1. libuv
- libuv is a cross platform open source library written in C
- It handles asynchronous non-blocking operations in Nodejs
- It does it by using Thread Pool and Event Loop
- The asynchronous operations are handled in 2 ways:
    - Native Async mechanism
    - Thread Pool
- Native Async mechanism
    - Whenever possible, libuv will use Native Async mechanism in the OS to avoid blocking the main thread
    - Since this is the part of the kernel, there is different mechanism for different OS
    - Native Async mechanism for different OS:
        - Linux - epoll
        - MacOS - Kqueue
        - Windows - IO Completion Port
    - Relying on the Native Async mechanism makes nodejs scalable as the only limitation is the OS kernel
    - Ex - Network I/O


2. Thread Pool
- It is one of the features of libuv
- It is nothing but the collection of many threads
- Whenever the main thread in Nodejs encounters asynchronous task, it offloads that task to thread pool in libuv
- Then the main thread continues to execute the further code and the thread pool complete the task and then send the response back to main thread and executes the callBack
- The tasks offloaded to the Thread Pool are done synchronously in the thread pool where each task is done by a their own single thread from Thread Pool, but to the main thread it seems they are executing asynchronously
- Thread Pool size
    - In Thread Pool, by default, there are only 4 threads 
    - If we give 4 asynchronous tasks at any instance then the tasks will be executed parallely in Thread Pool
    - If we give 5 or more tasks then they will start working in batches of 4 at a time
    - But we can increase the size of the Thread pool by using this variable
        process.env.UV_THREADPOOL_SIZE = [thread_pool_size]
    - But we can increase the number of threads upto the limit of the number CPU cores in the machine, because beyond that limit the CPU has to adjust the [more] number of threads to the [less] number of CPU cores which will be time consuming


3. Network Input/Output
- Network I/O is done by Native Async mechanism of Nodejs
- For performing Network operations we can send an https request on network using http.request()
- http.request is a network input/output operation and not a CPU-bound operation
- It is an asynchronous task but it does not uses Thread Pool
- It does not get affected by the number of CPU cores in the machine
- libuv delegates this task of http.request() to the operating system kernel and whenever possible, it will poll the kernel and check if the request has completed


4. Async Code execution in Nodejs
- Nodejs has V8 engine which contains Memory Heap and Call Stack
- Memory Heap is the place where all the variables and functions gets stored while the execution of the programme
- Call Stack is the place where the function gets listed before execution one after the other as the code proceeds
- At first, the main thread of the Javascript gets loaded into Global Scope as the Global() function gets listed up in the Call Stack
- Then, as and when the function call happens the function gets stacked up in the Call Stack and they gets executed in the 'First In Last Out' fashion in the main thread using Memory Heap
- Once a function gets executed, the function gets removed from the list in the Call Stack and so on.
- Whenever any Asynchronous task comes, the Async function gets loaded up in the Call Stack, then the main thread offloads this async function along with the CallBack function to the 'libuv' library
- libuv executes the Async function via one of the thread in its Thread Pool and send back the CallBack function back to the main thread with the neccessary arguments
- Then the main thread executes this CallBack function.
- While this Async task was getting executed in the libuv, the main thread keeps on executing the code.
- Once all the Synchronous code gets executed in the program, then only the callBacks from Asynchronous code gets executed
- Once all the functions gets executed, the main thread also comes out of the Global Scope, and the Global() function gets removed from the Call Stack.


5. Event Loop
- Event Loop is a loop which is alive till the Javascript program executes in the Nodejs Runtime
- It contains 6 Queues which executes one by one, and each queue holds one or more CallBack functions which eventually executes in the Call-Stack
- All these Callback functions are different in each Queue
- In each iteration in the Event Loop, each of these queues executes in a certain order
- The Queues are:
    - microtask Queue: nextTick queue - contains the callBacks assiociated with process.nextTick (specific to nodejs)
    - microtask Queue: promise queue - contains the callBacks assiociated with the promises
    - timer queue - contains the callBacks assiociated with setTimeout/setInterval
    - i/o queue - contains the callBacks assiociated with the async operations like methods in fs and https modules 
    - check queue - contains the callBacks assiociated with setImmediate (specific to nodejs)
    - close queue - contains the callBacks assiociated with close events of an async task
- Here, the timer queue, i/o queue, check queue and close queue are part of libuv but not the 2 microtask queues


6. Event Loop: Execution Order
- Synchronous code takes priority over Asynchronous code
- Only after the Call-Stack is empty, the event loop comes into picture
- Within the Event-Loop, there is a priority order to execute the callBacks (or tasks) in the queues
- The callBacks in the Queues are executed in the following order
    1. microtask queue: first nextTick queue then promise queue
    2. timer queue
    3. microtask queue: first nextTick queue then promise queue
    4. i/o queue
    5. microtask queue: first nextTick queue then promise queue
    6. check queue
    7. microtask queue: first nextTick queue then promise queue
    8. close queue
    9. microtask queue: first nextTick queue then promise queue
- The above order keeps on repeating for every iteration (or loop) till all the callBacks are executed in all the queues
- Once all the callBacks are executed and there is no more code to process, the Event-Loop exists
- If all the callBacks in all the queues are ready at the same time, the order for execution still maintains
- Here, while executing the callBacks in the timer queue, i/o queue, check queue and close queue, after every callBack execution in any of these queues, the control keeps on going back to the microtask queue to check if there are any callBacks pending to execute


7. process.nextTick()
- Use of process.nextTick() is discouraged since as it can cause the rest of the Event-Loop to starve
- If you endlessly call process.nextTick(), the control will never pass the Microtask queue
- Two main reasons to use process.nextTick()
    - To allow users to handle errors, cleanup any then un-needed resources, or perhaps try the request again before the Event-Loop continues
    - To allow a callBack to run after the Call-Stack has unwound but before the Event-Loop continues


8. Timer Queue
- It executes the callbacks in FIFO order
- It's exactly not a queue but the MinHeap data-structure
- The C++ implementation for setTimeout() function is such that the timeout time for the callBack to wait before it start executing is maximum of either 1ms or (timeout-value * 1ms)
- If the timeout-value passed as second argument is 0ms then also the timeout time is 1ms, so the setTimeout function has to always wait for atleast 1ms before starting the execution of the callBack
- So if the setTimeout() callBack in Time Queue is executing along with the callBacks in any other Queue then the result is not certain even though the execution order is predefined in Event-Loop  


9. I/O Queue
- I/O Queue contains all the asynchronous task that we execute in the Javascript program
- All the functions in the node:fs and node:http modules are queued in I/O queue for execution
- I/O events are polled in the Event-Loop, and callBack functions are added into the I/O queue only the input/output operation is completed after polling
- For the first iteration of the Event-Loop, the I/O polling takes place after the control has passed form I/O queue to the Check queue
- Before the I/O polling happens, the I/O callbacks are not included in the I/O queue so for the first iteration of the Event-Loop the I/O queue will always be exmpty and the control will always go to the Check queue executing the setImmediate() in check queue
